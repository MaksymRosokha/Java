/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package working.with.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;

/**
 *
 * @author Maksim
 */
public class ViewContacts extends javax.swing.JInternalFrame {

    private List<UserNumber> numbers = new ArrayList<>();
    private List<Contact> contacts = new ArrayList<>();
    private Connection conn = null;
    private EditContact frmEditContact;
    private PhoneDirectory frmPhoneDirectory;
    
    /**
     * Creates new form ViewContacts
     */
    public ViewContacts(PhoneDirectory frmPhoneDirectory) {
        initComponents();
        conn = ConnectorWithDatabase.getConn();
        this.frmPhoneDirectory = frmPhoneDirectory;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBackground = new javax.swing.JPanel();
        cmbUserNumbers = new javax.swing.JComboBox<>();
        lblSelectNumber = new javax.swing.JLabel();
        btnShowContacts = new javax.swing.JButton();
        jScrollPane = new javax.swing.JScrollPane();
        lstContacts = new javax.swing.JList<>();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 255));
        setBorder(null);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setTitle("Перегляд контактів");

        pnlBackground.setBackground(new java.awt.Color(204, 204, 255));

        cmbUserNumbers.setBackground(new java.awt.Color(0, 0, 255));
        cmbUserNumbers.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N

        lblSelectNumber.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblSelectNumber.setForeground(new java.awt.Color(0, 0, 255));
        lblSelectNumber.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSelectNumber.setText("Виберіть номер:");

        btnShowContacts.setBackground(new java.awt.Color(0, 51, 255));
        btnShowContacts.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnShowContacts.setText("Показати контакти");
        btnShowContacts.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnShowContacts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowContactsActionPerformed(evt);
            }
        });

        jScrollPane.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        lstContacts.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lstContacts.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jScrollPane.setViewportView(lstContacts);

        btnEdit.setBackground(new java.awt.Color(0, 255, 0));
        btnEdit.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnEdit.setText("Змінити");
        btnEdit.setBorderPainted(false);
        btnEdit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEdit.setEnabled(false);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 51, 51));
        btnDelete.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnDelete.setText("Видалити");
        btnDelete.setBorderPainted(false);
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBackgroundLayout = new javax.swing.GroupLayout(pnlBackground);
        pnlBackground.setLayout(pnlBackgroundLayout);
        pnlBackgroundLayout.setHorizontalGroup(
            pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackgroundLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnShowContacts, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackgroundLayout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblSelectNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbUserNumbers, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlBackgroundLayout.setVerticalGroup(
            pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(lblSelectNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbUserNumbers, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnShowContacts)
                .addGap(15, 15, 15)
                .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnShowContactsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowContactsActionPerformed
        downloadContacts();
    }//GEN-LAST:event_btnShowContactsActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        Contact contact = null;
        for(Contact con: contacts){
            if(lstContacts.getSelectedValue().equals(con.getName() + " : " + con.getPhone())){
                contact = con;
                break;
            }
        }
        
        if(frmEditContact == null){
            frmEditContact = new EditContact(frmPhoneDirectory, this);
        }
        frmEditContact.setContact(contact);
        frmEditContact.setVisible(true);
        frmPhoneDirectory.setEnabled(false);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        Contact contact = null;
        for(Contact con: contacts){
            if(lstContacts.getSelectedValue().equals(con.getName() + " : " + con.getPhone())){
                contact = con;
                break;
            }
        }

        if(deleteContact(contact)){
            JOptionPane.showMessageDialog(rootPane,"Контакт успішно видалений");
            downloadContacts();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private boolean deleteContact(Contact contact){
        String SQL = "DELETE FROM contacts_number WHERE id = " + contact.getId();
        PreparedStatement st = null;
        try{
            st = conn.prepareStatement(SQL);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(rootPane,"Помилка під час встановлення з'єднання з базою даних","Помилка",JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try{
            int rez = st.executeUpdate();
            if(rez == 1){
                return true;
            }
            return false;
        } catch (Exception ex){
            JOptionPane.showMessageDialog(rootPane,"Не вдалося видалити контакт","Помилка",JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
    
    public void downloadNumbers(){
        String SQL = "SELECT id, phone FROM user_numbers WHERE id_user = " + PhoneDirectory.getUser().getId();
        PreparedStatement st = null;
        
        try{
            st = conn.prepareStatement(SQL);
        } catch (Exception ex){
            JOptionPane.showMessageDialog(rootPane,"Помилка під час встановлення з'єднання з базою даних","Помилка",JOptionPane.ERROR_MESSAGE);
        }
        try{
            ResultSet rez = st.executeQuery();
            if(!rez.isBeforeFirst()){
                JOptionPane.showMessageDialog(rootPane,"У вас немає доданих номерів");
            }
            
            cmbUserNumbers.removeAllItems();
            numbers.clear();
            while(rez.next()){
                numbers.add(new UserNumber(rez.getInt("id"), rez.getString("phone")));
                cmbUserNumbers.addItem(rez.getString("phone"));
            }
            
        }catch (Exception ex){
            JOptionPane.showMessageDialog(rootPane,"Не вдалося завантажити номери з бази даних","Помилка",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void downloadContacts(){
        DefaultListModel<String> listOfContacts = new DefaultListModel();
        
        UserNumber selectedNumber = null;
        for(UserNumber num: numbers){
            if(cmbUserNumbers.getSelectedItem().equals(num.getNumber())){
                selectedNumber = num;
            }
        }
        
        String SQL = "SELECT id, phone, name FROM contacts_number WHERE id_user_number = " + selectedNumber.getId();
        PreparedStatement st = null;
        
        try{
            st = conn.prepareStatement(SQL);
        } catch (Exception ex){
            JOptionPane.showMessageDialog(rootPane,"Помилка під час встановлення з'єднання з базою даних","Помилка",JOptionPane.ERROR_MESSAGE);
        }
        try{
            ResultSet rez = st.executeQuery();
            if(!rez.isBeforeFirst()){
                btnEdit.setEnabled(false);
                btnDelete.setEnabled(false);
            }
            contacts.clear();
            while(rez.next()){
                contacts.add(new Contact(rez.getInt("id"), rez.getString("phone"), rez.getString("name")));
                listOfContacts.addElement(rez.getString("name") + " : " + rez.getString("phone"));
                btnEdit.setEnabled(true);
                btnDelete.setEnabled(true);
            }
            lstContacts.setModel(listOfContacts);
            lstContacts.setSelectedIndex(0);
        }catch (Exception ex){
            JOptionPane.showMessageDialog(rootPane,"Не вдалося завантажити номери з бази даних","Помилка",JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnShowContacts;
    private javax.swing.JComboBox<String> cmbUserNumbers;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JLabel lblSelectNumber;
    private javax.swing.JList<String> lstContacts;
    private javax.swing.JPanel pnlBackground;
    // End of variables declaration//GEN-END:variables
}
