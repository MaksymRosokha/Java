/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package working.with.db;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Maksim
 */
public class CreateContactToNumber extends javax.swing.JInternalFrame {

    private List<UserNumber> numbers = new ArrayList<>();
    private Connection conn = null;
    /**
     * Creates new form CreateContactToNumber
     */
    public CreateContactToNumber() {
        initComponents();
        conn = ConnectorWithDatabase.getConn();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBackground2 = new javax.swing.JPanel();
        btnCreateContact = new javax.swing.JButton();
        lblUserNumber = new javax.swing.JLabel();
        txtContactNumber = new javax.swing.JTextField();
        cmbUserNumbers = new javax.swing.JComboBox<>();
        lblContactNumber = new javax.swing.JLabel();
        txtContactName = new javax.swing.JTextField();
        lblNameContact = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 255));
        setBorder(null);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setTitle("Створити контакт");

        pnlBackground2.setBackground(new java.awt.Color(204, 204, 255));

        btnCreateContact.setBackground(new java.awt.Color(0, 51, 255));
        btnCreateContact.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnCreateContact.setText("Створити");
        btnCreateContact.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCreateContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateContactActionPerformed(evt);
            }
        });

        lblUserNumber.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblUserNumber.setForeground(new java.awt.Color(0, 0, 255));
        lblUserNumber.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUserNumber.setText("Для якого номеру:");

        txtContactNumber.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N

        cmbUserNumbers.setBackground(new java.awt.Color(0, 0, 255));
        cmbUserNumbers.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N

        lblContactNumber.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblContactNumber.setForeground(new java.awt.Color(0, 0, 255));
        lblContactNumber.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblContactNumber.setText("Номер контакту");

        txtContactName.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N

        lblNameContact.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblNameContact.setForeground(new java.awt.Color(0, 0, 255));
        lblNameContact.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNameContact.setText("Ім'я контакту");

        javax.swing.GroupLayout pnlBackground2Layout = new javax.swing.GroupLayout(pnlBackground2);
        pnlBackground2.setLayout(pnlBackground2Layout);
        pnlBackground2Layout.setHorizontalGroup(
            pnlBackground2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackground2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCreateContact, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackground2Layout.createSequentialGroup()
                .addContainerGap(95, Short.MAX_VALUE)
                .addGroup(pnlBackground2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbUserNumbers, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUserNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtContactName, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNameContact, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        pnlBackground2Layout.setVerticalGroup(
            pnlBackground2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackground2Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addComponent(lblUserNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbUserNumbers, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(lblContactNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblNameContact)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtContactName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(btnCreateContact)
                .addGap(40, 40, 40))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackground2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackground2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateContactActionPerformed
        if(cmbUserNumbers.getItemCount() == 0){
            return;
        }
        if(!checkInformation()){
            return;
        }
        
        createContact();
    }//GEN-LAST:event_btnCreateContactActionPerformed

    private boolean checkInformation(){
        if(txtContactName.getText().length() > 255){
            JOptionPane.showMessageDialog(rootPane, "Ім'я контакту не повинно бути більшим за 255 символів", "Помилка", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(txtContactName.getText().equals("")){
            JOptionPane.showMessageDialog(rootPane, "Ім'я контакту не повинно бути меншим за 1 символ", "Помилка", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(txtContactNumber.getText().length() > 15){
            JOptionPane.showMessageDialog(rootPane, "Номер не повинен бути більшим за 15 символів", "Помилка", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(txtContactNumber.getText().equals("")){
            JOptionPane.showMessageDialog(rootPane, "Номер не повинен бути меншим за 1 символ", "Помилка", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    private boolean createContact(){
        UserNumber number = null;
        for(UserNumber num: numbers){
            if(cmbUserNumbers.getSelectedItem().equals(num.getNumber())){
                number = num;
            }
        }
        
        String SQL = "INSERT INTO contacts_number (id_user_number, phone, name) VALUES (?,?,?);";
        PreparedStatement st = null;

            try{
                st = conn.prepareStatement(SQL);
                st.setInt(1, number.getId());
                st.setString(2, txtContactNumber.getText());
                st.setString(3, txtContactName.getText());
            } catch (SQLException ex){
                JOptionPane.showMessageDialog(rootPane, "Помилка під час встановлення з'єднання з базою даних", "Помилка", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            try{
                int rez = st.executeUpdate();
                if(rez == 1){
                    JOptionPane.showMessageDialog(rootPane, "Контакт для номеру "+number.getNumber() +" успішно створений");
                    txtContactNumber.setText("");
                    txtContactName.setText("");
                    return true;
                }
                return false;
            } catch(SQLException ex){
                JOptionPane.showMessageDialog(rootPane, "Не вдалося створити контакт до номеру" + number.getNumber(), "Помилка", JOptionPane.ERROR_MESSAGE);
                return false;
            }
    }

    public void downloadNumbers(){
        String SQL = "SELECT id, phone FROM user_numbers WHERE id_user = " + PhoneDirectory.getUser().getId();
        PreparedStatement st = null;
        
        try{
            st = conn.prepareStatement(SQL);
        } catch (Exception ex){
            JOptionPane.showMessageDialog(rootPane,"Помилка під час встановлення з'єднання з базою даних","Помилка",JOptionPane.ERROR_MESSAGE);
        }
        try{
            ResultSet rez = st.executeQuery();
            if(!rez.isBeforeFirst()){
                JOptionPane.showMessageDialog(rootPane,"У вас немає доданих номерів");
            }
            
            cmbUserNumbers.removeAllItems();
            numbers.clear();
            while(rez.next()){
                numbers.add(new UserNumber(rez.getInt("id"), rez.getString("phone")));
                cmbUserNumbers.addItem(rez.getString("phone"));
            }
            
        }catch (Exception ex){
            JOptionPane.showMessageDialog(rootPane,"Не вдалося завантажити номери з бази даних","Помилка",JOptionPane.ERROR_MESSAGE);
        }
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnCreate1;
    private javax.swing.JButton btnCreateContact;
    private javax.swing.JComboBox<String> cmbUserNumbers;
    private javax.swing.JLabel lblContactNumber;
    private javax.swing.JLabel lblNameContact;
    private javax.swing.JLabel lblUserNumber;
    private javax.swing.JPanel pnlBackground;
    private javax.swing.JPanel pnlBackground1;
    private javax.swing.JPanel pnlBackground2;
    private javax.swing.JTextField txtContactName;
    private javax.swing.JTextField txtContactNumber;
    // End of variables declaration//GEN-END:variables
}
